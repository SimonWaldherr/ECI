/*!
\mainpage Introduction
\section sec_purpose The Story Behind the ECI:
With the rise of the core Flight Executor (cFE), a framework created by the Goddard Space Flight Center to
address the growing "clone and own" strategy, comes a significant learning curve to create core Flight System (cFS)
apps for spacecraft missions. The goal of the External Code Interface (ECI) was to provide a relatively simple
framework to develop cFS apps compatable with the cFE without having to know the details of the internal mechanisms
of the cFE. Of course, since zero cost abstractions are hard to come by, the goal of the ECI was to only introduce
as much complexity as needed for getting simple apps off the ground. By providing an interface header, it's possible
to integrate legacy FSW code into cFE apps without having to fully convert the source code into something compatable
with the cFE.

The ECI framework was created to primarily support:
- Legacy Code
- Autogenerated Code
- Hand-written algorithms

\section sec_heritage ECI's Heritage:
Autogeneration of code is nothing new in the world of flight software but tools like Matlab/Simulink don't have
an internal concept of the framework your project is working with. The precursor to the ECI, the Simulink
Interface Layer (SIL), aimed to solve a more specific problem; How do we integrate autogenerated simulink code
into the new cFS environment? After developing the SIL, the concept of integrating non-cFE oriented code into
a cFE environment was generalized and turned into what we now call the ECI.
The SIL/ECI have been used on a suite of past NASA missions such as LADEE, NICER, GEDI, and PACE
with a continuing support into newer versions of the cFE. Since ECI was primarily developed for bringing
legacy/non-cFE code into the cFS, the ECI's goal is to smooth the learning curve for cFE application development.

\section sec_howto How to Read This Documentation:
These docs are intended to provide enough information to integrate your app with the ECI and as such we've tried
to preempt as many questions as possible. Since we are trying our best to provide a quick transition from
external code to a working cFS app, our documentation aims to provide the shortest route to a working application.
If you're not interested in learning the abstractions, feel free to start from one of our working examples and
modify it to your use case. If you're the kind of person that wishes to know the ins and outs of whatever framework
you're working with, we've hopefully included enough information to satiate your curiousity. In either case, we hope you
find these documents informative and the ECI framework a pleasure to work with.

\section sec_requirements ECI Integration Requirements:
The barebones nature of the ECI places some restrictions on the structure of apps that can be built with the ECI.
For most applications, we've noticed a subset of patterns that are already present or could be easily added to
external code without changing it's function.
  - The structure provided to ECI as a buffer, must be global.
  - The external code needs to provide a run loop to be executed on each
    tick of the ECI.

\section sec_components Main Components of the ECI:
As a framework intended to support the cFE, it's expected that we need to work within standard C constructs; that
being the case, we provide access to ECI's behavior using a header file named `eci_interface.h` ideally written by
a software developer knowledgable with the target external code. You can find more details on writing this
interface header \ref creating_eci_interface "here" or if you tend to learn better under example, we've
provided two examples in the `/examples` directory in the repository.

The ECI was designed to support most core CFE features such as:
- initialization, execution, and termination of application
- input/output message management with CFE Software Bus (SB)
- table management with CFE Table Services (TS)
- housekeeping counter management
- event services registration and event triggering
- Critical Data Store (CDS) nonvolatile storage of data

For a more in depth explaination of the inner workings of ECI, we've created several diagrams
indicating the order of events \ref diagrams "here".

\section sec_change_requests Change Requests and Community Involvement:
ECI development tries to be receptive towards issues posted on the official ECI repository on GitHub. If you find
yourself having trouble with something that hasn't been provided in this documentation, please consider opening an
issue. The development team for ECI is relatively small and we try to make improvements as we get the opportunity
but your feedback gives us a clearer picture of what our users expect from the ECI. 
*/
